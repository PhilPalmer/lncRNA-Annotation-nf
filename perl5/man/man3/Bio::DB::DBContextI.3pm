.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::DBContextI 3"
.TH Bio::DB::DBContextI 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::DBContextI \- Interface for a class implementing a database context
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 3
\&    # obtain a DBContextI implementing object somehow, usually through
\&    # a factory, for example
\&    use Bio::DB::BioDB;
\&
\&    $dbcontext = Bio::DB::BioDB\->new(
\&                        \-database => \*(Aqbiosql\*(Aq
\&                        \-user     => \*(Aqroot\*(Aq,
\&                        \-pass     => \*(Aqmypasswd\*(Aq,
\&                        \-dbname   => \*(Aqpog\*(Aq,
\&                        \-host     => \*(Aqcaldy\*(Aq,
\&                        \-port     => 3306,    # optional
\&                        \-driver   => \*(Aqmysql\*(Aq,
\&            );
\&
\&    # obtain other adaptors as needed
\&    $dbadp = $dbc\->dbadaptor();
\&    $seq_adaptor = $dbadp\->get_adaptor(\*(AqBio::PrimarySeqI\*(Aq);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents the context of a database that is implemented somehow.
.SH "CONTACT"
.IX Header "CONTACT"
.Vb 1
\&    Hilmar Lapp, hlapp at gmx.net
.Ve
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods. Internal 
methods are usually preceded with a _
.SS "dsn"
.IX Subsection "dsn"
.Vb 3
\& Title   : dsn
\& Usage   : $obj\->dsn($newval)
\& Function: Get/set the DSN for the database connection. 
\&
\&           The DSN typically contains all non\-credential information
\&           necessary to connect to the database, like driver, database
\&           or instance name, host, etc. Therefore, setting the DSN
\&           overrides any other individual properties set before. An
\&           implementation should make an attempt to parse those
\&           properties out of the DSN string but is not mandated to do
\&           so. Modules that use a DBContextI compliant object to
\&           construct a DSN should instead use the value of this
\&           property verbatim for connecting to the database, if it is
\&           defined.
\&
\&           I.e., if you set this property, setting any other
\&           individual properties will not alter the DSN used for
\&           connecting to the database. If you query the property, a
\&           value will not be automatically constructed if only
\&           individual properties have been set. This is so because
\&           constructing the proper DSN from individual properties is
\&           driver\-specific, and therefore cannot be done in a
\&           driver\-neutral module.
\&
\& Example : 
\& Returns : value of dsn (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve
.SS "dbname"
.IX Subsection "dbname"
.Vb 6
\& Title   : dbname
\& Usage   : $obj\->dbname($newval)
\& Function: 
\& Example : 
\& Returns : value of dbname (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "driver"
.IX Subsection "driver"
.Vb 6
\& Title   : driver
\& Usage   : $obj\->driver($newval)
\& Function: 
\& Example : 
\& Returns : value of driver (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "username"
.IX Subsection "username"
.Vb 6
\& Title   : username
\& Usage   : $obj\->username($newval)
\& Function: 
\& Example : 
\& Returns : value of username (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "password"
.IX Subsection "password"
.Vb 6
\& Title   : password
\& Usage   : $obj\->password($newval)
\& Function: 
\& Example : 
\& Returns : value of password (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "host"
.IX Subsection "host"
.Vb 6
\& Title   : host
\& Usage   : $obj\->host($newval)
\& Function: 
\& Example : 
\& Returns : value of host (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "port"
.IX Subsection "port"
.Vb 6
\& Title   : port
\& Usage   : $obj\->port($newval)
\& Function: 
\& Example : 
\& Returns : value of port (a scalar)
\& Args    : new value (a scalar, optional)
.Ve
.SS "dbadaptor"
.IX Subsection "dbadaptor"
.Vb 8
\& Title   : dbadaptor
\& Usage   : $dbadp = $dbc\->dbadaptor();
\& Function:
\& Example :
\& Returns : An Bio::DB::DBAdaptorI implementing object (an object adaptor
\&           factory).
\& Args    : Optionally, on set an Bio::DB::DBAdaptorI implementing object (to
\&           be used as the object adaptor factory for the respective database)
.Ve
.SS "dbi"
.IX Subsection "dbi"
.Vb 6
\& Title   : dbi
\& Usage   :
\& Function:
\& Example :
\& Returns : A Bio::DB::DBI implementing object
\& Args    : Optionally, on set a Bio::DB::DBI implementing object
.Ve
.SS "schema"
.IX Subsection "schema"
.Vb 3
\& Title   : schema
\& Usage   : $dbc\->schema($newval)
\& Function: Get/set the schema in which the database tables reside.
\&
\&           A schema is typically equivalent to a namespace for a
\&           collection of tables within a database. In Oracle, the
\&           notion of a schema is synonymous with that of the user (all
\&           database objects of a user belong to the schema of the same
\&           name as the user) and hence can be omitted. In PostgreSQL,
\&           since v7.4 schemas can delineate collections of tables
\&           within a database (which in concept is more similar to a
\&           user in Oracle).
\&
\&           For most drivers and database instances this will not be
\&           needed.
\&
\& Example : 
\& Returns : value of schema (a scalar)
\& Args    : on set, new value (a scalar or undef, optional)
.Ve

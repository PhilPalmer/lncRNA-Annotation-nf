.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::BioSQL::mysql::SpeciesAdaptorDriver 3"
.TH Bio::DB::BioSQL::mysql::SpeciesAdaptorDriver 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::BioSQL::mysql::SpeciesAdaptorDriver \- DESCRIPTION of Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Give standard usage here
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Describe the object here
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 2
\&  bioperl\-bugs@bioperl.org
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::DB::BioSQL::mysql::SpeciesAdaptorDriver\->new();
\& Function: Builds a new Bio::DB::BioSQL::mysql::SpeciesAdaptorDriver object 
\& Returns : an instance of Bio::DB::BioSQL::mysql::SpeciesAdaptorDriver
\& Args    :
.Ve
.SS "prepare_findbypk_sth"
.IX Subsection "prepare_findbypk_sth"
.Vb 6
\& Title   : prepare_findbypk_sth
\& Usage   :
\& Function: Prepares and returns a DBI statement handle with one placeholder for
\&           the primary key. The statement is expected to return the primary key
\&           as the first and then as many columns as 
\&           $adp\->get_persistent_slots() returns, and in that order.
\&
\& Example :
\& Returns : A DBI prepared statement handle with one placeholder
\& Args    : The Bio::DB::BioSQL::BasePersistenceAdaptor derived object 
\&           (basically, it needs to implement dbh() and get_persistent_slots()).
\&           A reference to an array of foreign key slots (class names).
\&           The name class for the taxon name table (default is
\&           \*(Aqscientific name\*(Aq).
.Ve
.SS "prepare_findbyuk_sth"
.IX Subsection "prepare_findbyuk_sth"
.Vb 4
\& Title   : prepare_findbyuk_sth
\& Usage   :
\& Function: Prepares and returns a DBI SELECT statement handle with as many
\&           placeholders as necessary for the given unique key.
\&
\&           The statement is expected to return the primary key as the first and
\&           then as many columns as $adp\->get_persistent_slots() returns, and in
\&           that order.
\& Example :
\& Returns : A DBI prepared statement handle with as many placeholders as 
\&           necessary for the given unique key
\& Args    : The calling Bio::DB::BioSQL::BasePersistenceAdaptor derived object 
\&           (basically, it needs to implement dbh() and get_persistent_slots()).
\&           A reference to a hash with the names of the object\*(Aq\*(Aqs slots in the
\&           unique key as keys and their values as values.
\&           A reference to an array of foreign key objects or slots 
\&           (class names if slot).
.Ve
.SS "prepare_delete_sth"
.IX Subsection "prepare_delete_sth"
.Vb 4
\& Title   : prepare_delete_sth
\& Usage   :
\& Function: Creates a prepared statement with one placeholder variable suitable
\&           to delete one row from the respective table the given class maps to.
\&
\&           We override this here in order to delete from the taxon
\&           node table, not the taxon name table. The node table will
\&           cascade to the name table.
\&
\& Example :
\& Returns : A DBI statement handle for a prepared statement with one placeholder
\& Args    : The calling adaptor (basically, it needs to implement dbh()).
\&           Optionally, additional arguments.
.Ve
.SS "insert_object"
.IX Subsection "insert_object"
.Vb 12
\& Title   : insert_object
\& Usage   :
\& Function:
\& Example :
\& Returns : The primary key of the newly inserted record.
\& Args    : A Bio::DB::BioSQL::BasePersistenceAdaptor derived object
\&           (basically, it needs to implement dbh(), sth($key, $sth),
\&            dbcontext(), and get_persistent_slots()).
\&           The object to be inserted.
\&           A reference to an array of foreign key objects; if any of those
\&           foreign key values is NULL (some foreign keys may be nullable),
\&           then give the class name.
.Ve
.SS "update_object"
.IX Subsection "update_object"
.Vb 12
\& Title   : update_object
\& Usage   :
\& Function:
\& Example :
\& Returns : The number of updated rows
\& Args    : A Bio::DB::BioSQL::BasePersistenceAdaptor derived object
\&           (basically, it needs to implement dbh(), sth($key, $sth),
\&            dbcontext(), and get_persistent_slots()).
\&           The object to be updated.
\&           A reference to an array of foreign key objects; if any of those
\&           foreign key values is NULL (some foreign keys may be nullable),
\&           then give the class name.
.Ve
.SS "_build_select_list"
.IX Subsection "_build_select_list"
.Vb 10
\& Title   : _build_select_list
\& Usage   :
\& Function: Builds and returns the select list for an object query. The list
\&           contains those columns, in the right order, that are necessary to
\&           populate the object.
\& Example :
\& Returns : An array of strings (column names, not prefixed)
\& Args    : The calling persistence adaptor.
\&           A reference to an array of foreign key entities (objects, class
\&           names, or adaptors) the object must attach.
\&           A reference to a hash table mapping entity names to aliases (if
\&           omitted, aliases will not be used, and SELECT columns can only be
\&           from one table)
.Ve
.SS "get_classification"
.IX Subsection "get_classification"
.Vb 9
\& Title   : get_classification
\& Usage   :
\& Function: Returns the classification array for a taxon as identified by
\&           its primary key.
\& Example :
\& Returns : a reference to an array of two\-element arrays, where the first
\&           element contains the name of the node and the second element
\&           denotes its rank
\& Args    : the calling adaptor, the primary key of the taxon
.Ve
.SS "get_common_name"
.IX Subsection "get_common_name"
.Vb 7
\& Title   : get_common_name
\& Usage   :
\& Function: Get the common name for a taxon as identified by its primary
\&           key.
\& Example :
\& Returns : a string denoting the common name
\& Args    : the calling adaptor, and the primary key of the taxon
.Ve

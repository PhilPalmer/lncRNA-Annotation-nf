.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::BioSQL::Oracle::BiosequenceAdaptorDriver 3"
.TH Bio::DB::BioSQL::Oracle::BiosequenceAdaptorDriver 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::BioSQL::Oracle::BiosequenceAdaptorDriver \- DESCRIPTION of Object
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Give standard usage here
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Describe the object here
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
email or the web:
.PP
.Vb 2
\&  bioperl\-bugs@bioperl.org
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.PP
Describe contact details here
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "insert_object"
.IX Subsection "insert_object"
.Vb 5
\& Title   : insert_object
\& Usage   :
\& Function: We override this here in order to omit the insert if there are
\&           no values. This is because this entity basically represents a
\&           derived class, and we may simply be dealing with the base class.
\&
\& Example :
\& Returns : The primary key of the newly inserted record.
\& Args    : A Bio::DB::BioSQL::BasePersistenceAdaptor derived object
\&           (basically, it needs to implement dbh(), sth($key, $sth),
\&            dbcontext(), and get_persistent_slots()).
\&           The object to be inserted.
\&           A reference to an array of foreign key objects; if any of those
\&           foreign key values is NULL (some foreign keys may be nullable),
\&           then give the class name.
.Ve
.SS "update_object"
.IX Subsection "update_object"
.Vb 10
\& Title   : update_object
\& Usage   :
\& Function: See parent class. We need to override this here because
\&           there is no Biosequence object separate from PrimarySeq
\&           that would hold a primary key. Hence, store()s cannot
\&           recognize when the Biosequence for a Bioentry already
\&           exists and needs to be updated, or when it needs to be
\&           created. The way the code is currently wired, the presence
\&           of the primary key (stemming from the bioentry) will always
\&           trigger an update.
\&
\&           So, what we need to do here is check whether the entry already
\&           exists and if not delegate to insert_object().
\& Example :
\& Returns : The number of updated rows
\& Args    : A Bio::DB::BioSQL::BasePersistenceAdaptor derived object
\&           (basically, it needs to implement dbh(), sth($key, $sth),
\&            dbcontext(), and get_persistent_slots()).
\&           The object to be updated.
\&           A reference to an array of foreign key objects; if any of those
\&           foreign key values is NULL (some foreign keys may be nullable),
\&           then give the class name.
.Ve
.SS "get_biosequence"
.IX Subsection "get_biosequence"
.Vb 11
\& Title   : get_biosequence
\& Usage   :
\& Function: Returns the actual sequence for a bioentry, or a substring of it.
\& Example :
\& Returns : A string (the sequence or subsequence)
\& Args    : The calling persistence adaptor.
\&           The primary key of the bioentry for which to obtain the sequence.
\&           Optionally, start and end position if only a subsequence is to be
\&           returned (for long sequences, obtaining the subsequence from the
\&           database may be much faster than obtaining it from the complete
\&           in\-memory string, because the latter has to be retrieved first).
.Ve
.SS "prepare"
.IX Subsection "prepare"
.Vb 3
\& Title   : prepare
\& Usage   :
\& Function: Prepares a SQL statement and returns a statement handle.
\&
\&           We override this here in order to intercept the row update
\&           statement. We\*(Aqll edit the statement to replace the table
\&           name with the fully qualified table the former points to if
\&           it is in fact a synonym, not a real table. The reason is
\&           that otherwise LOB support doesn\*(Aqt work properly if the LOB
\&           parameter is wrapped in a call to NVL() (which it is) and
\&           the table is only a synonym, not a physical table.
\&
\& Example :
\& Returns : the return value of the DBI::prepare() call
\& Args    : the DBI database handle for preparing the statement
\&           the SQL statement to prepare (a scalar)
\&           additional arguments to be passed to the dbh\->prepare call
.Ve
.SS "get_sth"
.IX Subsection "get_sth"
.Vb 4
\& Title   : get_sth
\& Usage   :
\& Function: Retrieves the (prepared) statement handle to bind
\&           parameters for and to execute for the given operation.
\&
\&           By default this will use the supplied key to retrieve the
\&           statement from the cache.
\&
\&           This method is here to provide an opportunity for
\&           inheriting drivers to intercept the cached statement
\&           retrieval in order to on\-the\-fly redirect the statement
\&           execution to use a different statement than it would have
\&           used by default.
\&
\&           This method may return undef if for instance there is no
\&           appropriate statement handle in the cache. Returning undef
\&           will trigger the calling method to construct a statement
\&           from scratch.
\&
\& Example :
\& Returns : a prepared statement handle if one is exists for the query,
\&           and undef otherwise
\& Args    : \- the calling adaptor (a Bio::DB::BioSQL::BasePersistenceAdaptor
\&             derived object
\&           \- the object for the persistence operation
\&           \- a reference to an array of foreign key objects; if any of
\&             those foreign key values is NULL then the class name
\&           \- the key to the cache of the adaptor
\&           \- the operation requesting a cache key (a scalar basically
\&             representing the name of the method)
.Ve
.SS "_upd_sth2"
.IX Subsection "_upd_sth2"
.Vb 4
\& Title   : _upd_sth2
\& Usage   : $obj\->_upd_sth2($newval)
\& Function: Get/set the second version of the update row statement
\&           as a prepared statement handle.
\&
\&           The \*(Aqsecond version\*(Aq differs from the default in that the
\&           set parameter for the SEQ column is not wrapped in a NVL()
\&           call. This is needed to make it work for LOB values (values
\&           longer than 4000 chars). However, this statement should
\&           only be executed if the value is defined in order to
\&           prevent unwanted un\-sets of the value in the database.
\&
\&           This is a private method. Do not use from outside.
\&
\& Example : 
\& Returns : value of _upd_sth2 (a DBI statement handle)
\& Args    : on set, new value (a DBI statement handle or undef, optional)
.Ve
.SS "_upd_sth3"
.IX Subsection "_upd_sth3"
.Vb 4
\& Title   : _upd_sth3
\& Usage   : $obj\->_upd_sth3($newval)
\& Function: Get/set the third version of the update row statement
\&           as a prepared statement handle.
\&
\&           The \*(Aqthird version\*(Aq differs from the default in that the
\&           parameter for the SEQ column is not used for updating at
\&           all, but instead is placed into the WHERE\-section as a
\&           dummy clause that always evaluates to true. This is needed
\&           to protect existing LOB values longer than 4000 chars from
\&           being updated to NULL, due to a bug in NVL().
\&
\&           This is a private method. Do not use from outside.
\&
\& Example : 
\& Returns : value of _upd_sth3 (a DBI statement handle)
\& Args    : on set, new value (a DBI statement handle or undef, optional)
.Ve

.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::DBI::TransactionListener 3"
.TH Bio::DB::DBI::TransactionListener 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::DBI::TransactionListener \- a simple transaction listener
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 1
\&    # see method section
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object is the contract and at the same time a simple (neutral)
implementation of a transaction listener.
.PP
Transaction listeners are notified before and after commit and
rollback on transactions as represented by a
Bio::DB::DBI::Transaction objects.
.PP
Note that this is a very loose contract in the sense that it is not
enforced. Therefore it serves more as a guideline of what you *can*
do rather than what you have to do.
.PP
You may currently choose between 3 different options on how to listen
to transactions:
.PP
.Vb 3
\&    \- write your own transaction listener that inherits from this
\&      class and overrides methods as suitable, then use your class to
\&      add listeners to Transactions
\&
\&    \- let your adaptor or persistent object module inherit from this
\&      class and thereby make it a listener\-compliant object that you
\&      can then use to register with Transactions
\&
\&    \- register any object with Transaction that implements at least
\&      one of the methods defined here (if it implements none then
\&      what\*(Aqs the point?). Transaction will only call the methods
\&      defined here if the listener actually implements them.
.Ve
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.PP
Describe contact details here
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SS "new"
.IX Subsection "new"
.Vb 5
\& Title   : new
\& Usage   : my $obj = Bio::DB::DBI::TransactionListener\->new();
\& Function: Builds a new Bio::DB::DBI::TransactionListener object 
\& Returns : an instance of Bio::DB::DBI::TransactionListener
\& Args    :
.Ve
.SS "register_sub"
.IX Subsection "register_sub"
.Vb 4
\& Title   : register_sub
\& Usage   :
\& Function: Register an anonymous code block for being executed in
\&           one of the listener methods.
\&
\&           This method is probably mostly useful for testing purposes,
\&           but who knows.
\&
\&           You may call this as a class method or an object method.
\&
\& Example :
\& Returns : an instance of this class with the supplied anonymous
\&           function overriding the specified listener method
\& Args    : the code reference to register
\&
\&           the name(s) of the interface method(s) to register it for
\&           (optional, if not specified the code block will be
\&           registered for all 4 methods)
.Ve
.SH "TransactionListener interface methods"
.IX Header "TransactionListener interface methods"
The following methods define the interface for TransactionListeners.
.SS "before_commit"
.IX Subsection "before_commit"
.Vb 3
\& Title   : before_commit
\& Usage   :
\& Function: Called before a commit is issued. 
\&
\&           Any listener may veto a pending commit by returning
\&           false. The default implementation returns true.
\&
\& Example :
\& Returns : TRUE if the transaction is good to be committed, and
\&           FALSE if it is vetoed.
\& Args    : none
.Ve
.SS "after_commit"
.IX Subsection "after_commit"
.Vb 3
\& Title   : after_commit
\& Usage   :
\& Function: Called after a commit was issued. 
\&
\&           The default implementation here does nothing.
\&
\& Example :
\& Returns : ignored
\& Args    : none
.Ve
.SS "before_rollback"
.IX Subsection "before_rollback"
.Vb 3
\& Title   : before_rollback
\& Usage   :
\& Function: Called before a rollback is issued. 
\&
\&           A listener cannot veto a pending rollback. The return value
\&           and even thrown exceptions will be ignored by Transaction.
\&
\& Example :
\& Returns : ignored
\& Args    : none
.Ve
.SS "after_rollback"
.IX Subsection "after_rollback"
.Vb 3
\& Title   : after_rollback
\& Usage   :
\& Function: Called after a rollback is issued. 
\&
\& Example :
\& Returns : ignored
\& Args    : none
.Ve

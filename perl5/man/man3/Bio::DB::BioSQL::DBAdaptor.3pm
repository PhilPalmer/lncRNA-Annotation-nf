.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::BioSQL::DBAdaptor 3"
.TH Bio::DB::BioSQL::DBAdaptor 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::BioSQL::DBAdapter \- Object representing an instance of a 
bioperl database
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 6
\&    $dbcontext = Bio::DB::SimpleContext\->new(
\&        \-user   => \*(Aqroot\*(Aq,
\&        \-dbname => \*(Aqpog\*(Aq,
\&        \-host   => \*(Aqcaldy\*(Aq,
\&        \-driver => \*(Aqmysql\*(Aq,
\&        );
\&
\&    $db = Bio::DB::BioSQL::DBAdaptor\->new(
\&        \-dbcontext => $dbcontext
\&    );
\&
\&    # You can also create db adaptor by calling Bio::DB::BioDB constructor.
\&    $db = Bio::DB::BioDB\->new(
\&        \-database => \*(Aqbiosql\*(Aq,
\&        \-user   => \*(Aqroot\*(Aq,
\&        \-dbname => \*(Aqpog\*(Aq,
\&        \-host   => \*(Aqcaldy\*(Aq,
\&        \-driver => \*(Aqmysql\*(Aq,
\&    );
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This object represents a database that is implemented somehow (you
shouldn't care much as long as you can get the object). From the
object you can pull out other adapters, such as the BioSeqAdapter,
.SH "CONTACT"
.IX Header "CONTACT"
Describe contact details here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "get_object_adaptor"
.IX Subsection "get_object_adaptor"
.Vb 10
\& Title   : get_object_adaptor
\& Usage   : $objadp = $adaptor\->get_object_adaptor("Bio::SeqI");
\& Function: Obtain an PersistenceAdaptorI compliant object for the given class
\&           or object.
\& Example :
\& Returns : The appropriate object adaptor, a Bio::DB::PersistenceAdaptorI
\&           implementing object.
\& Args    : The class (a string) or object for which the adaptor is to be
\&           obtained. Optionally, a DBContextI implementing object to initialize
\&           the adaptor with.
.Ve
.SS "_get_object_adaptor_class"
.IX Subsection "_get_object_adaptor_class"
.Vb 9
\& Title   : _get_object_adaptor_class
\& Usage   : $objadpclass = $adaptor\->_get_object_adaptor_class("Bio::SeqI");
\& Function: Obtains and loads the PersistenceAdaptorI compliant class for the
\&           given class or object.
\& Example :
\& Returns : The appropriate object adaptor class, a Bio::DB::PersistenceAdaptorI
\&           implementing class, or an instantiation of it, if one has been
\&           cached.
\& Args    : The class (a string) for which the adaptor class is to be obtained.
.Ve
.SS "set_object_adaptor"
.IX Subsection "set_object_adaptor"
.Vb 9
\& Title   : set_object_adaptor
\& Usage   : $adaptor\->set_object_adaptor("Bio::SeqI", $bioseqadaptor);
\& Function: Sets the PersistenceAdaptorI compliant object and/or class for the
\&           given class or interface.
\& Example :
\& Returns : none
\& Args    : The class (a string) or object for which the adaptor is to be set.
\&           The PersistenceAdaptorI compliant class or an instance of it to
\&           serve as the adaptor.
.Ve
.SS "create_persistent"
.IX Subsection "create_persistent"
.Vb 10
\& Title   : create_persistent
\& Usage   : $dbadaptor\->create_persistent($obj)
\& Function: Creates a PersistentObjectI implementing object that adapts the
\&           given object to the datastore.
\& Example :
\& Returns : A Bio::DB::PeristentObjectI implementing object
\& Args    : An object of a type that can be stored in the datastore adapted
\&           by this factory. Alternatively, the class name of such an object.
\&           All remaining arguments will be passed to the constructor of the
\&           class if the first argument is a class name.
.Ve
.SS "dbcontext"
.IX Subsection "dbcontext"
.Vb 3
\& Title   : dbcontext
\& Usage   : $obj\->dbcontext($newval)
\& Function: Get/set the DBContextI object representing the physical database.
\&
\&           If this slot is not set, adaptor objects returned by
\&           get_adaptor() will not be initialized with a database connection,
\&           unless a DBContextI is passed to get_adaptor().
\& Example : 
\& Returns : A DBContextI implementing object
\& Args    : on set, the new DBContextI implementing object
.Ve
.SS "_load_object_adaptor"
.IX Subsection "_load_object_adaptor"
.Vb 6
\& Title   : _load_object_adaptor
\& Usage   :
\& Function:
\& Example :
\& Returns : 
\& Args    :
.Ve

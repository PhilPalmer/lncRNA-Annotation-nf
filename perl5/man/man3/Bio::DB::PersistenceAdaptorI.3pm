.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::PersistenceAdaptorI 3"
.TH Bio::DB::PersistenceAdaptorI 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::PersistenceAdaptorI \- DESCRIPTION of Interface
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
Give standard usage here
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
This interface gives the base methods to be implemented by modules that
bridge persistent objects to and from their datastores.
.PP
The design choice mixes the strategy pattern with the factory pattern
(\fIfind_by_XXXX()\fR).
.SH "FEEDBACK"
.IX Header "FEEDBACK"
.SS "Mailing Lists"
.IX Subsection "Mailing Lists"
User feedback is an integral part of the evolution of this and other
Bioperl modules. Send your comments and suggestions preferably to
the Bioperl mailing list.  Your participation is much appreciated.
.PP
.Vb 2
\&  bioperl\-l@bioperl.org                  \- General discussion
\&  http://bioperl.org/wiki/Mailing_lists  \- About the mailing lists
.Ve
.SS "Support"
.IX Subsection "Support"
Please direct usage questions or support issues to the mailing list:
.PP
\&\fIbioperl\-l@bioperl.org\fR
.PP
rather than to the module maintainer directly. Many experienced and 
reponsive experts will be able look at the problem and quickly 
address it. Please include a thorough description of the problem 
with code and data examples if at all possible.
.SS "Reporting Bugs"
.IX Subsection "Reporting Bugs"
Report bugs to the Bioperl bug tracking system to help us keep track
of the bugs and their resolution. Bug reports can be submitted via
the web:
.PP
.Vb 1
\&  http://redmine.open\-bio.org/projects/bioperl/
.Ve
.SH "AUTHOR \- Hilmar Lapp"
.IX Header "AUTHOR - Hilmar Lapp"
Email hlapp at gmx.net
.PP
Describe contact details here
.SH "CONTRIBUTORS"
.IX Header "CONTRIBUTORS"
Additional contributors names and emails here
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object methods.
Internal methods are usually preceded with a _
.SH "Methods for managing persistent objects"
.IX Header "Methods for managing persistent objects"
.Vb 1
\&   Create (insert), store (update), remove (delete)
.Ve
.SS "create"
.IX Subsection "create"
.Vb 4
\& Title   : create
\& Usage   : $objectstoreadp\->create($obj)
\& Function: Creates the object as a persistent object in the datastore. This
\&           is equivalent to an insert.
\&
\&           If the object already implements this interface, it will be
\&           populated with values, and the primary key will be set.
\&
\& Example :
\& Returns : A Bio::DB::PersistentObjectI implementing object wrapping
\&           the inserted object.
\& Args    : The object to be inserted.
\&
\&           Optionally, additional named parameters. A common parameter
\&           will be \-fkobjs, with a reference to an array of foreign
\&           key objects if these cannot be obtained from the object
\&           itself.
.Ve
.SS "create_persistent"
.IX Subsection "create_persistent"
.Vb 6
\& Title   : create_persistent
\& Usage   :
\& Function: Takes the given object and turns it onto a
\&           L<Bio::DB::PersistentObjectI> implementing object. Returns
\&           the result. Does not actually create the object in a
\&           database.
\&
\&           Calling this method is expected to have a recursive effect
\&           such that all children of the object, i.e., all slots that
\&           are objects themselves, are made persistent objects, too.
\&
\& Example :
\& Returns : A Bio::DB::PersistentObjectI implementing object wrapping the
\&           passed object.
\& Args    : An object to be made into a PersistentObjectI object, and the class
\&           of which is suitable for this adaptor.
\&
\&           Optionally, the class which actually implements wrapping
\&           the object to become a PersistentObjectI.
.Ve
.SS "store"
.IX Subsection "store"
.Vb 3
\& Title   : store
\& Usage   : $objectstoreadp\->store($persistent_obj)
\& Function: Updates the given persistent object in the datastore.
\&
\&           Implementations should be flexible and delegate to create()
\&           if the primary_key() method of the object returns undef.
\&
\& Example :
\& Returns : TRUE on success and FALSE otherwise
\& Args    : The object to be updated, which must implement
\&           Bio::DB:PersistentObjectI.
\&
\&           Optionally, additional named parameters. A common parameter
\&           will be \-fkobjs, with a reference to an array of foreign
\&           key objects if these cannot be obtained from the object
\&           itself.
.Ve
.SS "remove"
.IX Subsection "remove"
.Vb 7
\& Title   : remove
\& Usage   : $objectstoreadp\->remove($persistent_obj, @params)
\& Function: Removes the persistent object from the datastore.
\& Example :
\& Returns : TRUE on success and FALSE otherwise
\& Args    : The object to be removed, and optionally additional (named) 
\&           parameters.
.Ve
.SH "Methods for locating objects"
.IX Header "Methods for locating objects"
.Vb 1
\&    Find by primary key, by unique key, by association, and by query.
.Ve
.SS "find_by_primary_key"
.IX Subsection "find_by_primary_key"
.Vb 9
\& Title   : find_by_primary_key
\& Usage   : $popj = $objectstoreadp\->find_by_primary_key($pk)
\& Function: Locates the entry associated with the given primary key and
\&           initializes a persistent object with that entry.
\& Example :
\& Returns : An instance of the class this adaptor adapts, represented by an
\&           object implementing Bio::DB::PersistentObjectI, or undef if no
\&           matching entry was found.
\& Args    : The primary key
.Ve
.SS "find_by_unique_key"
.IX Subsection "find_by_unique_key"
.Vb 11
\& Title   : find_by_unique_key
\& Usage   :
\& Function: Locates the entry matching the unique key attributes as set in the
\&           passed object, and populates a persistent object with this entry.
\& Example :
\& Returns : A Bio::DB::PersistentObjectI implementing object, with the
\&           attributes populated with values provided by the entry in
\&           the datastore, or undef if no matching entry was found. If
\&           one was found, the object returned will be the first
\&           argument if that implemented Bio::DB::PersistentObjectI
\&           already.
\&
\& Args    : The object with those attributes set that constitute the
\&           chosen unique key (note that the class of the object must
\&           be suitable for the adaptor).
\&
\&           Additional attributes and values if required, passed as a
\&           reference to a hash map.
.Ve
.SS "find_by_association"
.IX Subsection "find_by_association"
.Vb 6
\& Title   : find_by_association
\& Usage   :
\& Function: Locates those records associated between a number of
\&           objects. The focus object (the type to be instantiated)
\&           depends on the adaptor class that inherited from this
\&           class.
\&
\& Example :
\& Returns : A Bio::DB::Query::QueryResultI implementing object 
\& Args    : Named parameters. At least the following must be recognized:
\&               \-objs   a reference to an array of objects to be associated with
\&                       each other
\&               \-obj_factory the factory to use for instantiating objects from
\&                       the found rows
\&  Caveats: Make sure you *always* give the objects to be associated in the
\&           same order.
.Ve
.SS "find_by_query"
.IX Subsection "find_by_query"
.Vb 4
\& Title   : find_by_query
\& Usage   :
\& Function: Locates entries that match a particular query and returns the
\&           result as an array of peristent objects.
\&
\&           The query is represented by an instance of
\&           Bio::DB::Query::BioQuery or a derived class. Note that
\&           SELECT fields will be ignored and auto\-determined. Give
\&           tables in the query as objects, class names, or adaptor
\&           names, and columns as slot names or foreign key class names
\&           in order to be maximally independent of the exact
\&           underlying schema. The driver of this adaptor will
\&           translate the query into tables and column names.
\&
\& Example :
\& Returns : A Bio::DB::Query::QueryResultI implementing object
\& Args    : The query as a Bio::DB::Query::BioQuery or derived instance.
\&           Note that the SELECT fields of that query object will inadvertantly
\&           be overwritten.
\&           Optionally additional (named) parameters. Recognized parameters
\&           at this time are
\&              \-fkobjs    a reference to an array of foreign key objects that
\&                         are not retrievable from the persistent object itself
\&              \-obj_factory  the object factory to use for creating objects for
\&                         resulting rows
\&              \-name      a unique name for the query, which will make the
\&                         the statement be a cached prepared statement, which
\&                         in subsequent invocations will only be re\-bound with
\&                         parameters values, but not recreated
\&              \-values    a reference to an array holding the values to be
\&                         bound, if the query is a named query
.Ve
.SH "Methods for transactional control"
.IX Header "Methods for transactional control"
.Vb 1
\&   Rollback and commit
.Ve
.SS "commit"
.IX Subsection "commit"
.Vb 7
\& Title   : commit
\& Usage   :
\& Function: Commits the current transaction, if the underlying driver
\&           supports transactions.
\& Example :
\& Returns : TRUE
\& Args    : none
.Ve
.SS "rollback"
.IX Subsection "rollback"
.Vb 7
\& Title   : rollback
\& Usage   :
\& Function: Triggers a rollback of the current transaction, if the
\&           underlying driver supports transactions.
\& Example :
\& Returns : TRUE
\& Args    : none
.Ve

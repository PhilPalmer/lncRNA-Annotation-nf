.\" Automatically generated by Pod::Man 2.22 (Pod::Simple 3.13)
.\"
.\" Standard preamble:
.\" ========================================================================
.de Sp \" Vertical space (when we can't use .PP)
.if t .sp .5v
.if n .sp
..
.de Vb \" Begin verbatim text
.ft CW
.nf
.ne \\$1
..
.de Ve \" End verbatim text
.ft R
.fi
..
.\" Set up some character translations and predefined strings.  \*(-- will
.\" give an unbreakable dash, \*(PI will give pi, \*(L" will give a left
.\" double quote, and \*(R" will give a right double quote.  \*(C+ will
.\" give a nicer C++.  Capital omega is used to do unbreakable dashes and
.\" therefore won't be available.  \*(C` and \*(C' expand to `' in nroff,
.\" nothing in troff, for use with C<>.
.tr \(*W-
.ds C+ C\v'-.1v'\h'-1p'\s-2+\h'-1p'+\s0\v'.1v'\h'-1p'
.ie n \{\
.    ds -- \(*W-
.    ds PI pi
.    if (\n(.H=4u)&(1m=24u) .ds -- \(*W\h'-12u'\(*W\h'-12u'-\" diablo 10 pitch
.    if (\n(.H=4u)&(1m=20u) .ds -- \(*W\h'-12u'\(*W\h'-8u'-\"  diablo 12 pitch
.    ds L" ""
.    ds R" ""
.    ds C` ""
.    ds C' ""
'br\}
.el\{\
.    ds -- \|\(em\|
.    ds PI \(*p
.    ds L" ``
.    ds R" ''
'br\}
.\"
.\" Escape single quotes in literal strings from groff's Unicode transform.
.ie \n(.g .ds Aq \(aq
.el       .ds Aq '
.\"
.\" If the F register is turned on, we'll generate index entries on stderr for
.\" titles (.TH), headers (.SH), subsections (.SS), items (.Ip), and index
.\" entries marked with X<> in POD.  Of course, you'll have to process the
.\" output yourself in some meaningful fashion.
.ie \nF \{\
.    de IX
.    tm Index:\\$1\t\\n%\t"\\$2"
..
.    nr % 0
.    rr F
.\}
.el \{\
.    de IX
..
.\}
.\"
.\" Accent mark definitions (@(#)ms.acc 1.5 88/02/08 SMI; from UCB 4.2).
.\" Fear.  Run.  Save yourself.  No user-serviceable parts.
.    \" fudge factors for nroff and troff
.if n \{\
.    ds #H 0
.    ds #V .8m
.    ds #F .3m
.    ds #[ \f1
.    ds #] \fP
.\}
.if t \{\
.    ds #H ((1u-(\\\\n(.fu%2u))*.13m)
.    ds #V .6m
.    ds #F 0
.    ds #[ \&
.    ds #] \&
.\}
.    \" simple accents for nroff and troff
.if n \{\
.    ds ' \&
.    ds ` \&
.    ds ^ \&
.    ds , \&
.    ds ~ ~
.    ds /
.\}
.if t \{\
.    ds ' \\k:\h'-(\\n(.wu*8/10-\*(#H)'\'\h"|\\n:u"
.    ds ` \\k:\h'-(\\n(.wu*8/10-\*(#H)'\`\h'|\\n:u'
.    ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'^\h'|\\n:u'
.    ds , \\k:\h'-(\\n(.wu*8/10)',\h'|\\n:u'
.    ds ~ \\k:\h'-(\\n(.wu-\*(#H-.1m)'~\h'|\\n:u'
.    ds / \\k:\h'-(\\n(.wu*8/10-\*(#H)'\z\(sl\h'|\\n:u'
.\}
.    \" troff and (daisy-wheel) nroff accents
.ds : \\k:\h'-(\\n(.wu*8/10-\*(#H+.1m+\*(#F)'\v'-\*(#V'\z.\h'.2m+\*(#F'.\h'|\\n:u'\v'\*(#V'
.ds 8 \h'\*(#H'\(*b\h'-\*(#H'
.ds o \\k:\h'-(\\n(.wu+\w'\(de'u-\*(#H)/2u'\v'-.3n'\*(#[\z\(de\v'.3n'\h'|\\n:u'\*(#]
.ds d- \h'\*(#H'\(pd\h'-\w'~'u'\v'-.25m'\f2\(hy\fP\v'.25m'\h'-\*(#H'
.ds D- D\\k:\h'-\w'D'u'\v'-.11m'\z\(hy\v'.11m'\h'|\\n:u'
.ds th \*(#[\v'.3m'\s+1I\s-1\v'-.3m'\h'-(\w'I'u*2/3)'\s-1o\s+1\*(#]
.ds Th \*(#[\s+2I\s-2\h'-\w'I'u*3/5'\v'-.3m'o\v'.3m'\*(#]
.ds ae a\h'-(\w'a'u*4/10)'e
.ds Ae A\h'-(\w'A'u*4/10)'E
.    \" corrections for vroff
.if v .ds ~ \\k:\h'-(\\n(.wu*9/10-\*(#H)'\s-2\u~\d\s+2\h'|\\n:u'
.if v .ds ^ \\k:\h'-(\\n(.wu*10/11-\*(#H)'\v'-.4m'^\v'.4m'\h'|\\n:u'
.    \" for low resolution devices (crt and lpr)
.if \n(.H>23 .if \n(.V>19 \
\{\
.    ds : e
.    ds 8 ss
.    ds o a
.    ds d- d\h'-1'\(ga
.    ds D- D\h'-1'\(hy
.    ds th \o'bp'
.    ds Th \o'LP'
.    ds ae ae
.    ds Ae AE
.\}
.rm #[ #] #H #V #F C
.\" ========================================================================
.\"
.IX Title "Bio::DB::Query::AbstractQuery 3"
.TH Bio::DB::Query::AbstractQuery 3 "2016-05-27" "perl v5.10.1" "User Contributed Perl Documentation"
.\" For nroff, turn off justification.  Always turn off hyphenation; it makes
.\" way too many mistakes in technical documents.
.if n .ad l
.nh
.SH "NAME"
Bio::DB::Query::AbstractQuery \- Abstract Query class
.SH "SYNOPSIS"
.IX Header "SYNOPSIS"
.Vb 2
\&  # Don\e\*(Aqt use this class directly; use one of the subclasses (eg
\&  # SqlQuery, BioQuery)
\&
\&  $q = $queryclass\->new;
\&  $q\->datacollections(["table1 t1", "table2 t2"]);
\&  $q\->selectelts(["t1.colA", "t2.colB"]);
\&  $q\->where("or", "colA=x", "colB=y");
\&  $q\->orderelts(["t1.colA", "t2.colB"]);
.Ve
.SH "DESCRIPTION"
.IX Header "DESCRIPTION"
Core methods for representing some kind of query \- eg a query
expressed in an human type language, an \s-1SQL\s0 query, an object oriented
query.
.PP
Abstracted attribute names have been used; eg a query is assumed to be
over some kind of collection of data. the query is performed over a
subset of this data, a set of datacollections. These datacollections
are equivalent to tables in \s-1SQL\s0 and object adaptors when forming an \s-1OO\s0
query.
.PP
The where clause / constraints is represented by the QueryConstraint
composite object
.SH "CONTACT"
.IX Header "CONTACT"
Chris Mungall, cmungall@fruitfly.org
.SH "APPENDIX"
.IX Header "APPENDIX"
The rest of the documentation details each of the object
methods. Internal methods are usually preceded with a _
.SS "datacollections"
.IX Subsection "datacollections"
.Vb 2
\&  Usage:  $query\->datacollections([$t1,$t2]);      # setting
\&      OR   return $query\->datacollections();  # getting
.Ve
.PP
array reference of strings representing datacollections (eg tables,
objects)
.SS "add_datacollection"
.IX Subsection "add_datacollection"
.Vb 1
\&  Usage:  $query\->add_datacollection($t1, $t2, $t3);
.Ve
.PP
adds datacollections; removes duplicates
.SS "where"
.IX Subsection "where"
.Vb 8
\&  Usage:  $query\->where("and", "att1 = val1", "att2=val2"); # setting
\&      OR  $query\->where("att1 = val1"); # setting
\&      OR  $query\->where({att1=>$val1, att2=>$val2}); # setting
\&      OR  $query\->where(["OR",
\&                              ["AND",
\&                                     "x=1", "y=2", "z like blah*"],
\&                              ["AND",
\&                                     "x=5", "y=7", "z like wow*"]]);
\&
\&      OR   $qc = $query\->where();  # getting
\&
\& of type Bio::DB::Query::QueryConstraint
.Ve
.PP
this method is liberal in what it accepts.
.PP
see the \fInew()\fR method of Bio::DB::Query::QueryConstraint
.PP
it will turn hashes into an ANDed query constraint composite, with
each component being a name=value pair. it will turn arrays into an
ANDed constraint composite, breaking up each element around the =
symbol. if the first element of the array is a valid composite operand
(e.g. \*(L"or\*(R") it will combine the array elements using this.
.PP
Or you can just feed it a Bio::DB::Query::QueryConstraint object
.SS "selectelts"
.IX Subsection "selectelts"
.Vb 2
\&  Usage:  $query\->selectelts([$col1,$col2,$col3]);      # setting
\&      OR  $eltsref = $query\->selectelts();  # getting
.Ve
.PP
array reference of string represnting attributes/elements to be
selected
.SS "orderelts"
.IX Subsection "orderelts"
.Vb 2
\&  Usage:  $query\->orderelts(\e@elts);      # setting
\&      OR   return $query\->orderelts();  # getting
.Ve
.SS "groupelts"
.IX Subsection "groupelts"
.Vb 2
\&  Usage:  $query\->groupelts(\e@elts);      # setting
\&      OR   return $query\->groupelts();  # getting
.Ve
.SS "querytype"
.IX Subsection "querytype"
.Vb 2
\&  Usage:  $query\->querytype($val);      # setting
\&      OR   return $query\->querytype();  # getting
.Ve
.PP
one of : select, select distinct, insert, update, delete
.PP
ignored for now...
